type Query {
    getRolById(id: ID!): Rol
    getAllRoles: [Rol]
    getUserById(id: ID!): User
    getAllUsers: [User]
    getPetById(id: ID!): Pet
    getAllPets: [Pet]
    getPetsByUserId(userId: ID!): [Pet]
    getAllVisits: [Visits]
    getVisitsByReserved(reserved: Boolean!): [Visits]
    getVisitsByDoctor(idDoctor: String!): [Visits]
    getConsultationsByIdPatient(id: ID!): [Consultations]
    getAllVaccines: [Vaccine]
    getVaccineByIdPatient(id: ID!): [Vaccine]
    getAllAnalysis: [Analysis]
    getAnalysisByIdPatient(id: ID!): [Analysis]
}

type Mutation {
    createRol(rolRequest: RolRequest): Rol
    updateRol(id: ID!, name: String!): Rol
    deleteRol(id: ID!): String
    createUser(userRequest: UserRequest): User
    updateUser(id: ID!, userRequest: UserRequest): User
    deleteUser(id: ID!): String
    createPet(petRequest: PetRequest): Pet
    updatePet(id: ID!, petRequest: PetRequest): Pet
    deletePet(id: ID!): String
    createVisits(visitsRequest: VisitsRequest): Visits
    updateVisits(id: ID!, status: String): Visits
    deleteVisits(id: ID!): String
    createConsultations(consultationsRequest: ConsultationsRequest): Consultations
    deleteConsultations(id: ID!): String
    createVaccine(vaccineRequest: VaccineRequest): Vaccine
    createAnalysis(analysisRequest: AnalysisRequest): Analysis
}

type Rol {
    id: ID
    name: String!
}

input RolRequest {
    name: String!
}

type User {
    id: ID
    names: String!
    lastNames: String!
    ci: String!
    phone: String
    address: String
    email: String!
    password: String!
    roleId: String!
    rol: Rol
}

input UserRequest {
    names: String!
    lastNames: String!
    ci: String!
    phone: String
    address: String
    email: String!
    password: String!
    roleId: String!
}

type Pet {
    id: ID
    name: String!
    species: String!
    breed: String!
    age: Int!
    gender: String!
    color: String!
    userId: String!
}

input PetRequest {
    name: String!
    species: String!
    breed: String!
    age: Int!
    gender: String!
    color: String!
    userId: String!
}

type Visits {
    id: ID
    date: String!
    reason: String
    idPatient: String!
    idDoctor: String
    status: String
    reserved: Boolean
}

input VisitsRequest {
    date: String!
    reason: String
    idPatient: String!
    idDoctor: String
    status: String
    reserved: Boolean
}

type Consultations {
    id: ID
    patientId: String!
    doctorId: String!
    date: String
    weight: Float
    height: Int
    temperature: Float
    heartRate: Int
    respiratoryRate: Int
    diagnosis: String!
    treatment: String!
    notes: String
}

input ConsultationsRequest {
    patientId: String!
    doctorId: String!
    date: String
    weight: Float
    height: Int
    temperature: Float
    heartRate: Int
    respiratoryRate: Int
    diagnosis: String!
    treatment: String!
    notes: String
}

type Vaccine {
    id: ID
    patientId: String!
    vaccineName: String!
    administeredDate: String
    nextAdministeredDate: String
    doses: Int
}

input VaccineRequest {
    patientId: String!
    vaccineName: String!
    administeredDate: String
    nextAdministeredDate: String
    doses: Int
}

type Analysis {
    id: ID
    patientId: String!
    analysisType: String!
    results: String!
    analysisDate: String
    notes: String
}

input AnalysisRequest {
    id: ID
    patientId: String!
    analysisType: String!
    results: String!
    analysisDate: String
    notes: String
}
